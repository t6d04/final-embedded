
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000058c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000724  08000724  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000724  08000724  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000724  08000724  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000724  08000724  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000724  08000724  00001724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000728  08000728  00001728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800072c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000730  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000730  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a38  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000706  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00004178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000195  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141d1  00000000  00000000  0000454d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002abb  00000000  00000000  0001871e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080caa  00000000  00000000  0001b1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009be83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000700  00000000  00000000  0009bec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0009c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800070c 	.word	0x0800070c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800070c 	.word	0x0800070c

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	6039      	str	r1, [r7, #0]
 800021e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000224:	2b00      	cmp	r3, #0
 8000226:	db0a      	blt.n	800023e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	b2da      	uxtb	r2, r3
 800022c:	490c      	ldr	r1, [pc, #48]	@ (8000260 <__NVIC_SetPriority+0x4c>)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800023c:	e00a      	b.n	8000254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4908      	ldr	r1, [pc, #32]	@ (8000264 <__NVIC_SetPriority+0x50>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	f003 030f 	and.w	r3, r3, #15
 800024a:	3b04      	subs	r3, #4
 800024c:	0112      	lsls	r2, r2, #4
 800024e:	b2d2      	uxtb	r2, r2
 8000250:	440b      	add	r3, r1
 8000252:	761a      	strb	r2, [r3, #24]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	e000e100 	.word	0xe000e100
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <led_init>:
#include "gpio.h"

void led_init(){
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	GPIOB->MODER &= ~(3 << (LED1_PIN * 2));
 800026c:	4b1a      	ldr	r3, [pc, #104]	@ (80002d8 <led_init+0x70>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a19      	ldr	r2, [pc, #100]	@ (80002d8 <led_init+0x70>)
 8000272:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000276:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (LED1_PIN * 2));
 8000278:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <led_init+0x70>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a16      	ldr	r2, [pc, #88]	@ (80002d8 <led_init+0x70>)
 800027e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000282:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(3 << (LED2_PIN * 2));
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <led_init+0x70>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a13      	ldr	r2, [pc, #76]	@ (80002d8 <led_init+0x70>)
 800028a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800028e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (LED2_PIN * 2));
 8000290:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <led_init+0x70>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <led_init+0x70>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800029a:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(3 << (LED3_PIN * 2));
 800029c:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <led_init+0x70>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0d      	ldr	r2, [pc, #52]	@ (80002d8 <led_init+0x70>)
 80002a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (LED3_PIN * 2));
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <led_init+0x70>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <led_init+0x70>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002b2:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(3 << (5 * 2));
 80002b4:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <led_init+0x74>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a08      	ldr	r2, [pc, #32]	@ (80002dc <led_init+0x74>)
 80002ba:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << (5 * 2));
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <led_init+0x74>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a05      	ldr	r2, [pc, #20]	@ (80002dc <led_init+0x74>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020400 	.word	0x40020400
 80002dc:	40020000 	.word	0x40020000

080002e0 <button_init>:

void button_init(){
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(3 << (BTN1_PIN * 2));
 80002e4:	4b1d      	ldr	r3, [pc, #116]	@ (800035c <button_init+0x7c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1c      	ldr	r2, [pc, #112]	@ (800035c <button_init+0x7c>)
 80002ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002ee:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3 << (BTN1_PIN * 2));
 80002f0:	4b1a      	ldr	r3, [pc, #104]	@ (800035c <button_init+0x7c>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	4a19      	ldr	r2, [pc, #100]	@ (800035c <button_init+0x7c>)
 80002f6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002fa:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 1 << (BTN1_PIN * 2);
 80002fc:	4b17      	ldr	r3, [pc, #92]	@ (800035c <button_init+0x7c>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	4a16      	ldr	r2, [pc, #88]	@ (800035c <button_init+0x7c>)
 8000302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000306:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(3 << (BTN2_PIN * 2));
 8000308:	4b14      	ldr	r3, [pc, #80]	@ (800035c <button_init+0x7c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a13      	ldr	r2, [pc, #76]	@ (800035c <button_init+0x7c>)
 800030e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000312:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3 << (BTN2_PIN * 2));
 8000314:	4b11      	ldr	r3, [pc, #68]	@ (800035c <button_init+0x7c>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	4a10      	ldr	r2, [pc, #64]	@ (800035c <button_init+0x7c>)
 800031a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800031e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 1 << (BTN2_PIN * 2);
 8000320:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <button_init+0x7c>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a0d      	ldr	r2, [pc, #52]	@ (800035c <button_init+0x7c>)
 8000326:	f043 0310 	orr.w	r3, r3, #16
 800032a:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(3 << (BTN3_PIN * 2));
 800032c:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <button_init+0x7c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0a      	ldr	r2, [pc, #40]	@ (800035c <button_init+0x7c>)
 8000332:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000336:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3 << (BTN3_PIN * 2));
 8000338:	4b08      	ldr	r3, [pc, #32]	@ (800035c <button_init+0x7c>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	4a07      	ldr	r2, [pc, #28]	@ (800035c <button_init+0x7c>)
 800033e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000342:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 1 << (BTN3_PIN * 2);
 8000344:	4b05      	ldr	r3, [pc, #20]	@ (800035c <button_init+0x7c>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a04      	ldr	r2, [pc, #16]	@ (800035c <button_init+0x7c>)
 800034a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800034e:	60d3      	str	r3, [r2, #12]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40020000 	.word	0x40020000

08000360 <button_interrupt_init>:
	BUZZER_PORT->MODER &= ~(3UL << (BUZZER_PIN * 2));
	BUZZER_PORT->MODER |=  (1UL << (BUZZER_PIN * 2));
	BUZZER_PORT->ODR &= ~(1UL << BUZZER_PIN);
}

void button_interrupt_init(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	SYSCFG->EXTICR[0] &= ~(0xFUL << (BTN2_PIN * 4)); // Xóa cấu hình cũ cho EXTI2 (PA2)
 8000364:	4b2f      	ldr	r3, [pc, #188]	@ (8000424 <button_interrupt_init+0xc4>)
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	4a2e      	ldr	r2, [pc, #184]	@ (8000424 <button_interrupt_init+0xc4>)
 800036a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800036e:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] &= ~(0xFUL << (BTN1_PIN * 4)); // Xóa cấu hình cũ cho EXTI3 (PA3)
 8000370:	4b2c      	ldr	r3, [pc, #176]	@ (8000424 <button_interrupt_init+0xc4>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a2b      	ldr	r2, [pc, #172]	@ (8000424 <button_interrupt_init+0xc4>)
 8000376:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800037a:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[2] &= ~(0xFUL << ((BTN3_PIN % 4) * 4)); // Xóa cấu hình cũ cho EXTI10 (PA10)
 800037c:	4b29      	ldr	r3, [pc, #164]	@ (8000424 <button_interrupt_init+0xc4>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4a28      	ldr	r2, [pc, #160]	@ (8000424 <button_interrupt_init+0xc4>)
 8000382:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000386:	6113      	str	r3, [r2, #16]

	EXTI->RTSR &= ~(1UL << BTN1_PIN); // Không dùng Rising Trigger cho BTN1 (PA3)
 8000388:	4b27      	ldr	r3, [pc, #156]	@ (8000428 <button_interrupt_init+0xc8>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	4a26      	ldr	r2, [pc, #152]	@ (8000428 <button_interrupt_init+0xc8>)
 800038e:	f023 0308 	bic.w	r3, r3, #8
 8000392:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |=  (1UL << BTN1_PIN); // Kích hoạt Falling Trigger cho BTN1 (PA3)
 8000394:	4b24      	ldr	r3, [pc, #144]	@ (8000428 <button_interrupt_init+0xc8>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a23      	ldr	r2, [pc, #140]	@ (8000428 <button_interrupt_init+0xc8>)
 800039a:	f043 0308 	orr.w	r3, r3, #8
 800039e:	60d3      	str	r3, [r2, #12]

	EXTI->RTSR &= ~(1UL << BTN2_PIN); // Không dùng Rising Trigger cho BTN2 (PA2)
 80003a0:	4b21      	ldr	r3, [pc, #132]	@ (8000428 <button_interrupt_init+0xc8>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	4a20      	ldr	r2, [pc, #128]	@ (8000428 <button_interrupt_init+0xc8>)
 80003a6:	f023 0304 	bic.w	r3, r3, #4
 80003aa:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |=  (1UL << BTN2_PIN); // Kích hoạt Falling Trigger cho BTN2 (PA2)
 80003ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000428 <button_interrupt_init+0xc8>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000428 <button_interrupt_init+0xc8>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	60d3      	str	r3, [r2, #12]

	EXTI->RTSR &= ~(1UL << BTN3_PIN); // Không dùng Rising Trigger cho BTN3 (PA10)
 80003b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <button_interrupt_init+0xc8>)
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000428 <button_interrupt_init+0xc8>)
 80003be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80003c2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |=  (1UL << BTN3_PIN);
 80003c4:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <button_interrupt_init+0xc8>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4a17      	ldr	r2, [pc, #92]	@ (8000428 <button_interrupt_init+0xc8>)
 80003ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003ce:	60d3      	str	r3, [r2, #12]

    EXTI->IMR |= (1UL << BTN1_PIN);  // Unmask EXTI3
 80003d0:	4b15      	ldr	r3, [pc, #84]	@ (8000428 <button_interrupt_init+0xc8>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a14      	ldr	r2, [pc, #80]	@ (8000428 <button_interrupt_init+0xc8>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6013      	str	r3, [r2, #0]
    EXTI->IMR |= (1UL << BTN2_PIN);  // Unmask EXTI2
 80003dc:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <button_interrupt_init+0xc8>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a11      	ldr	r2, [pc, #68]	@ (8000428 <button_interrupt_init+0xc8>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6013      	str	r3, [r2, #0]
    EXTI->IMR |= (1UL << BTN3_PIN);  // Unmask EXTI10
 80003e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <button_interrupt_init+0xc8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000428 <button_interrupt_init+0xc8>)
 80003ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003f2:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(EXTI2_IRQn, 0); // Ưu tiên cao nhất (hoặc giá trị phù hợp)
 80003f4:	2100      	movs	r1, #0
 80003f6:	2008      	movs	r0, #8
 80003f8:	f7ff ff0c 	bl	8000214 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI3_IRQn, 0);
 80003fc:	2100      	movs	r1, #0
 80003fe:	2009      	movs	r0, #9
 8000400:	f7ff ff08 	bl	8000214 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI15_10_IRQn, 0); // EXTI10 thuộc group này
 8000404:	2100      	movs	r1, #0
 8000406:	2028      	movs	r0, #40	@ 0x28
 8000408:	f7ff ff04 	bl	8000214 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI2_IRQn);
 800040c:	2008      	movs	r0, #8
 800040e:	f7ff fee3 	bl	80001d8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3_IRQn);
 8000412:	2009      	movs	r0, #9
 8000414:	f7ff fee0 	bl	80001d8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000418:	2028      	movs	r0, #40	@ 0x28
 800041a:	f7ff fedd 	bl	80001d8 <__NVIC_EnableIRQ>
};
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40013800 	.word	0x40013800
 8000428:	40013c00 	.word	0x40013c00

0800042c <led_on>:

void led_on(GPIO_TypeDef* GPIOx, uint16_t pin){
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	460b      	mov	r3, r1
 8000436:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR = (1UL << pin); // Set pin
 8000438:	887b      	ldrh	r3, [r7, #2]
 800043a:	2201      	movs	r2, #1
 800043c:	409a      	lsls	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	619a      	str	r2, [r3, #24]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <led_off>:

void led_off(GPIO_TypeDef* GPIOx, uint16_t pin){
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	460b      	mov	r3, r1
 8000458:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR = (1UL << (pin + 16)); // Reset pin
 800045a:	887b      	ldrh	r3, [r7, #2]
 800045c:	3310      	adds	r3, #16
 800045e:	2201      	movs	r2, #1
 8000460:	409a      	lsls	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	619a      	str	r2, [r3, #24]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
	...

08000474 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1UL << BTN1_PIN)){
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <EXTI3_IRQHandler+0x44>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f003 0308 	and.w	r3, r3, #8
 8000482:	2b00      	cmp	r3, #0
 8000484:	d014      	beq.n	80004b0 <EXTI3_IRQHandler+0x3c>
		EXTI->PR = (1UL << BTN1_PIN);
 8000486:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <EXTI3_IRQHandler+0x44>)
 8000488:	2208      	movs	r2, #8
 800048a:	615a      	str	r2, [r3, #20]
		led_on(BTN_PORT, 5);
 800048c:	2105      	movs	r1, #5
 800048e:	480b      	ldr	r0, [pc, #44]	@ (80004bc <EXTI3_IRQHandler+0x48>)
 8000490:	f7ff ffcc 	bl	800042c <led_on>
		for (int i = 1; i< 10000000; i++);
 8000494:	2301      	movs	r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	e002      	b.n	80004a0 <EXTI3_IRQHandler+0x2c>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3301      	adds	r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a07      	ldr	r2, [pc, #28]	@ (80004c0 <EXTI3_IRQHandler+0x4c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	dbf8      	blt.n	800049a <EXTI3_IRQHandler+0x26>
		led_off(BTN_PORT, 5);
 80004a8:	2105      	movs	r1, #5
 80004aa:	4804      	ldr	r0, [pc, #16]	@ (80004bc <EXTI3_IRQHandler+0x48>)
 80004ac:	f7ff ffcf 	bl	800044e <led_off>
	}
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40013c00 	.word	0x40013c00
 80004bc:	40020000 	.word	0x40020000
 80004c0:	00989680 	.word	0x00989680

080004c4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1UL << BTN2_PIN)){
 80004ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <EXTI2_IRQHandler+0x44>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f003 0304 	and.w	r3, r3, #4
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d014      	beq.n	8000500 <EXTI2_IRQHandler+0x3c>
		EXTI->PR = (1UL << BTN2_PIN);
 80004d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <EXTI2_IRQHandler+0x44>)
 80004d8:	2204      	movs	r2, #4
 80004da:	615a      	str	r2, [r3, #20]
		led_on(BTN_PORT, 5);
 80004dc:	2105      	movs	r1, #5
 80004de:	480b      	ldr	r0, [pc, #44]	@ (800050c <EXTI2_IRQHandler+0x48>)
 80004e0:	f7ff ffa4 	bl	800042c <led_on>
		for (int i = 1; i< 10000000; i++);
 80004e4:	2301      	movs	r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	e002      	b.n	80004f0 <EXTI2_IRQHandler+0x2c>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3301      	adds	r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a07      	ldr	r2, [pc, #28]	@ (8000510 <EXTI2_IRQHandler+0x4c>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	dbf8      	blt.n	80004ea <EXTI2_IRQHandler+0x26>
		led_off(BTN_PORT, 5);
 80004f8:	2105      	movs	r1, #5
 80004fa:	4804      	ldr	r0, [pc, #16]	@ (800050c <EXTI2_IRQHandler+0x48>)
 80004fc:	f7ff ffa7 	bl	800044e <led_off>
	}
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40013c00 	.word	0x40013c00
 800050c:	40020000 	.word	0x40020000
 8000510:	00989680 	.word	0x00989680

08000514 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1UL << BTN3_PIN)){
 800051a:	4b10      	ldr	r3, [pc, #64]	@ (800055c <EXTI15_10_IRQHandler+0x48>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000522:	2b00      	cmp	r3, #0
 8000524:	d015      	beq.n	8000552 <EXTI15_10_IRQHandler+0x3e>
		EXTI->PR = (1UL << BTN3_PIN);
 8000526:	4b0d      	ldr	r3, [pc, #52]	@ (800055c <EXTI15_10_IRQHandler+0x48>)
 8000528:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800052c:	615a      	str	r2, [r3, #20]
		led_on(BTN_PORT, 5);
 800052e:	2105      	movs	r1, #5
 8000530:	480b      	ldr	r0, [pc, #44]	@ (8000560 <EXTI15_10_IRQHandler+0x4c>)
 8000532:	f7ff ff7b 	bl	800042c <led_on>
		for (int i = 1; i< 10000000; i++);
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e002      	b.n	8000542 <EXTI15_10_IRQHandler+0x2e>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3301      	adds	r3, #1
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a07      	ldr	r2, [pc, #28]	@ (8000564 <EXTI15_10_IRQHandler+0x50>)
 8000546:	4293      	cmp	r3, r2
 8000548:	dbf8      	blt.n	800053c <EXTI15_10_IRQHandler+0x28>
		led_off(BTN_PORT, 5);
 800054a:	2105      	movs	r1, #5
 800054c:	4804      	ldr	r0, [pc, #16]	@ (8000560 <EXTI15_10_IRQHandler+0x4c>)
 800054e:	f7ff ff7e 	bl	800044e <led_off>
	}
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40013c00 	.word	0x40013c00
 8000560:	40020000 	.word	0x40020000
 8000564:	00989680 	.word	0x00989680

08000568 <clock_init>:
#include "stm32f4xx.h"
#include "gpio.h"

void clock_init(){
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800056c:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <clock_init+0x40>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <clock_init+0x40>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <clock_init+0x40>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057c:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <clock_init+0x40>)
 800057e:	f043 0302 	orr.w	r3, r3, #2
 8000582:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <clock_init+0x40>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000588:	4a07      	ldr	r2, [pc, #28]	@ (80005a8 <clock_init+0x40>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <clock_init+0x40>)
 8000592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000594:	4a04      	ldr	r2, [pc, #16]	@ (80005a8 <clock_init+0x40>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800

080005ac <main>:

int main(void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	clock_init();
 80005b0:	f7ff ffda 	bl	8000568 <clock_init>
	led_init();
 80005b4:	f7ff fe58 	bl	8000268 <led_init>
	button_init();
 80005b8:	f7ff fe92 	bl	80002e0 <button_init>
	button_interrupt_init();
 80005bc:	f7ff fed0 	bl	8000360 <button_interrupt_init>
	while(1);
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <main+0x14>

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <NMI_Handler+0x4>

080005cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <HardFault_Handler+0x4>

080005d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <MemManage_Handler+0x4>

080005dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <BusFault_Handler+0x4>

080005e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <UsageFault_Handler+0x4>

080005ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061a:	f000 f83f 	bl	800069c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <SystemInit+0x20>)
 800062a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800062e:	4a05      	ldr	r2, [pc, #20]	@ (8000644 <SystemInit+0x20>)
 8000630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000680 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800064c:	f7ff ffea 	bl	8000624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	@ (8000694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000676:	f000 f825 	bl	80006c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800067a:	f7ff ff97 	bl	80005ac <main>
  bx  lr    
 800067e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800068c:	0800072c 	.word	0x0800072c
  ldr r2, =_sbss
 8000690:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000694:	20000024 	.word	0x20000024

08000698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC_IRQHandler>
	...

0800069c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <HAL_IncTick+0x20>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <HAL_IncTick+0x24>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a04      	ldr	r2, [pc, #16]	@ (80006c0 <HAL_IncTick+0x24>)
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000020 	.word	0x20000020

080006c4 <__libc_init_array>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	4d0d      	ldr	r5, [pc, #52]	@ (80006fc <__libc_init_array+0x38>)
 80006c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000700 <__libc_init_array+0x3c>)
 80006ca:	1b64      	subs	r4, r4, r5
 80006cc:	10a4      	asrs	r4, r4, #2
 80006ce:	2600      	movs	r6, #0
 80006d0:	42a6      	cmp	r6, r4
 80006d2:	d109      	bne.n	80006e8 <__libc_init_array+0x24>
 80006d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000704 <__libc_init_array+0x40>)
 80006d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000708 <__libc_init_array+0x44>)
 80006d8:	f000 f818 	bl	800070c <_init>
 80006dc:	1b64      	subs	r4, r4, r5
 80006de:	10a4      	asrs	r4, r4, #2
 80006e0:	2600      	movs	r6, #0
 80006e2:	42a6      	cmp	r6, r4
 80006e4:	d105      	bne.n	80006f2 <__libc_init_array+0x2e>
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ec:	4798      	blx	r3
 80006ee:	3601      	adds	r6, #1
 80006f0:	e7ee      	b.n	80006d0 <__libc_init_array+0xc>
 80006f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f6:	4798      	blx	r3
 80006f8:	3601      	adds	r6, #1
 80006fa:	e7f2      	b.n	80006e2 <__libc_init_array+0x1e>
 80006fc:	08000724 	.word	0x08000724
 8000700:	08000724 	.word	0x08000724
 8000704:	08000724 	.word	0x08000724
 8000708:	08000728 	.word	0x08000728

0800070c <_init>:
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	bf00      	nop
 8000710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000712:	bc08      	pop	{r3}
 8000714:	469e      	mov	lr, r3
 8000716:	4770      	bx	lr

08000718 <_fini>:
 8000718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800071a:	bf00      	nop
 800071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800071e:	bc08      	pop	{r3}
 8000720:	469e      	mov	lr, r3
 8000722:	4770      	bx	lr
