
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006e4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800087c  0800087c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800087c  0800087c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800087c  0800087c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800087c  0800087c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800087c  0800087c  0000187c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000880  08000880  00001880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000884  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000888  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000888  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f43  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008a2  00000000  00000000  00003f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  00004820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001af  00000000  00000000  00004a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001439f  00000000  00000000  00004c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003281  00000000  00000000  00018fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080d33  00000000  00000000  0001c257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009cf8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000764  00000000  00000000  0009cfd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0009d734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000864 	.word	0x08000864

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000864 	.word	0x08000864

080001d8 <adc1_init>:
#include "adc.h"

void adc1_init(void) {
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80001de:	4b2f      	ldr	r3, [pc, #188]	@ (800029c <adc1_init+0xc4>)
 80001e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001e2:	4a2e      	ldr	r2, [pc, #184]	@ (800029c <adc1_init+0xc4>)
 80001e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001e8:	6453      	str	r3, [r2, #68]	@ 0x44

    ADC1->CR1 &= ~ADC_CR1_RES;      // Độ phân giải 12-bit (giá trị 00)
 80001ea:	4b2d      	ldr	r3, [pc, #180]	@ (80002a0 <adc1_init+0xc8>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	4a2c      	ldr	r2, [pc, #176]	@ (80002a0 <adc1_init+0xc8>)
 80001f0:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80001f4:	6053      	str	r3, [r2, #4]
    ADC1->CR1 &= ~ADC_CR1_SCAN;     // Tắt Scan mode (nếu chỉ dùng 1 kênh trong 1 sequence)
 80001f6:	4b2a      	ldr	r3, [pc, #168]	@ (80002a0 <adc1_init+0xc8>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	4a29      	ldr	r2, [pc, #164]	@ (80002a0 <adc1_init+0xc8>)
 80001fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000200:	6053      	str	r3, [r2, #4]

    // ADC Control Register 2 (ADC1->CR2)
    ADC1->CR2 &= ~ADC_CR2_ALIGN;    // Dữ liệu căn phải (Right alignment)
 8000202:	4b27      	ldr	r3, [pc, #156]	@ (80002a0 <adc1_init+0xc8>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	4a26      	ldr	r2, [pc, #152]	@ (80002a0 <adc1_init+0xc8>)
 8000208:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800020c:	6093      	str	r3, [r2, #8]
    ADC1->CR2 &= ~ADC_CR2_CONT;     // Single conversion mode (không phải continuous)
 800020e:	4b24      	ldr	r3, [pc, #144]	@ (80002a0 <adc1_init+0xc8>)
 8000210:	689b      	ldr	r3, [r3, #8]
 8000212:	4a23      	ldr	r2, [pc, #140]	@ (80002a0 <adc1_init+0xc8>)
 8000214:	f023 0302 	bic.w	r3, r3, #2
 8000218:	6093      	str	r3, [r2, #8]
    ADC1->CR2 &= ~ADC_CR2_EXTSEL;   // Chọn software trigger (SWSTART)
 800021a:	4b21      	ldr	r3, [pc, #132]	@ (80002a0 <adc1_init+0xc8>)
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	4a20      	ldr	r2, [pc, #128]	@ (80002a0 <adc1_init+0xc8>)
 8000220:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000224:	6093      	str	r3, [r2, #8]
    ADC1->CR2 &= ~ADC_CR2_EXTEN;    // Trigger bằng software
 8000226:	4b1e      	ldr	r3, [pc, #120]	@ (80002a0 <adc1_init+0xc8>)
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	4a1d      	ldr	r2, [pc, #116]	@ (80002a0 <adc1_init+0xc8>)
 800022c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000230:	6093      	str	r3, [r2, #8]

    // ADC Sample time register (ADC1->SMPR1 và ADC1->SMPR2)
    // Cho kênh 10 (PC0 = ADC1_IN10), nằm trong SMPR1
    // SMPR1_SMP10[2:0] bits. Ví dụ: 001 = 15 cycles, 010 = 28 cycles, 011 = 56 cycles
    // Chọn sampling time phù hợp, ví dụ 56 cycles (011)
    ADC1->SMPR1 &= ~(ADC_SMPR1_SMP10); // Xóa các bit cũ
 8000232:	4b1b      	ldr	r3, [pc, #108]	@ (80002a0 <adc1_init+0xc8>)
 8000234:	68db      	ldr	r3, [r3, #12]
 8000236:	4a1a      	ldr	r2, [pc, #104]	@ (80002a0 <adc1_init+0xc8>)
 8000238:	f023 0307 	bic.w	r3, r3, #7
 800023c:	60d3      	str	r3, [r2, #12]
    ADC1->SMPR1 |= (ADC_SMPR1_SMP10_0 | ADC_SMPR1_SMP10_1); // 56 cycles (011b)
 800023e:	4b18      	ldr	r3, [pc, #96]	@ (80002a0 <adc1_init+0xc8>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	4a17      	ldr	r2, [pc, #92]	@ (80002a0 <adc1_init+0xc8>)
 8000244:	f043 0303 	orr.w	r3, r3, #3
 8000248:	60d3      	str	r3, [r2, #12]

    // ADC regular sequence register (ADC1->SQRx)
    // Chỉ dùng 1 kênh trong sequence -> L[3:0] = 0000 in ADC1->SQR1
    ADC1->SQR1 &= ~ADC_SQR1_L;      // Sequence length = 1 conversion
 800024a:	4b15      	ldr	r3, [pc, #84]	@ (80002a0 <adc1_init+0xc8>)
 800024c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800024e:	4a14      	ldr	r2, [pc, #80]	@ (80002a0 <adc1_init+0xc8>)
 8000250:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000254:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Đặt kênh 10 (PC0) làm kênh đầu tiên trong sequence
    ADC1->SQR3 &= ~ADC_SQR3_SQ1;    // Xóa SQ1 bits
 8000256:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <adc1_init+0xc8>)
 8000258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800025a:	4a11      	ldr	r2, [pc, #68]	@ (80002a0 <adc1_init+0xc8>)
 800025c:	f023 031f 	bic.w	r3, r3, #31
 8000260:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->SQR3 |= (10UL << 0);      // Gán channel 10 cho SQ1 (SQ1_0 ... SQ1_4)
 8000262:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <adc1_init+0xc8>)
 8000264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000266:	4a0e      	ldr	r2, [pc, #56]	@ (80002a0 <adc1_init+0xc8>)
 8000268:	f043 030a 	orr.w	r3, r3, #10
 800026c:	6353      	str	r3, [r2, #52]	@ 0x34

    // 2. Bật ADC
    ADC1->CR2 |= ADC_CR2_ADON;
 800026e:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <adc1_init+0xc8>)
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	4a0b      	ldr	r2, [pc, #44]	@ (80002a0 <adc1_init+0xc8>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6093      	str	r3, [r2, #8]

    for(volatile int i=0; i<1000; i++); // Delay nhỏ
 800027a:	2300      	movs	r3, #0
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	e002      	b.n	8000286 <adc1_init+0xae>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800028c:	dbf8      	blt.n	8000280 <adc1_init+0xa8>
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	40023800 	.word	0x40023800
 80002a0:	40012000 	.word	0x40012000

080002a4 <adc1_read_channel>:

// Đọc giá trị từ một kênh ADC cụ thể của ADC1
uint16_t adc1_read_channel(uint8_t channel) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]

    // 1. Bắt đầu chuyển đổi ADC
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80002ae:	4b0c      	ldr	r3, [pc, #48]	@ (80002e0 <adc1_read_channel+0x3c>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	4a0b      	ldr	r2, [pc, #44]	@ (80002e0 <adc1_read_channel+0x3c>)
 80002b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002b8:	6093      	str	r3, [r2, #8]

    // 2. Đợi cho đến khi cờ EOC (End Of Conversion) được bật
    while (!(ADC1->SR & ADC_SR_EOC));
 80002ba:	bf00      	nop
 80002bc:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <adc1_read_channel+0x3c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f003 0302 	and.w	r3, r3, #2
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <adc1_read_channel+0x18>

    // 3. Đọc giá trị từ thanh ghi dữ liệu ADC1->DR
    // Việc đọc ADC1->DR cũng sẽ tự động xóa cờ EOC.
    return (ADC1->DR & 0xFFF); // Trả về giá trị 12-bit
 80002c8:	4b05      	ldr	r3, [pc, #20]	@ (80002e0 <adc1_read_channel+0x3c>)
 80002ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d2:	b29b      	uxth	r3, r3
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	40012000 	.word	0x40012000

080002e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	db0b      	blt.n	800030e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f003 021f 	and.w	r2, r3, #31
 80002fc:	4907      	ldr	r1, [pc, #28]	@ (800031c <__NVIC_EnableIRQ+0x38>)
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	095b      	lsrs	r3, r3, #5
 8000304:	2001      	movs	r0, #1
 8000306:	fa00 f202 	lsl.w	r2, r0, r2
 800030a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000e100 	.word	0xe000e100

08000320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800032c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	db0a      	blt.n	800034a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	b2da      	uxtb	r2, r3
 8000338:	490c      	ldr	r1, [pc, #48]	@ (800036c <__NVIC_SetPriority+0x4c>)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	0112      	lsls	r2, r2, #4
 8000340:	b2d2      	uxtb	r2, r2
 8000342:	440b      	add	r3, r1
 8000344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000348:	e00a      	b.n	8000360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4908      	ldr	r1, [pc, #32]	@ (8000370 <__NVIC_SetPriority+0x50>)
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	f003 030f 	and.w	r3, r3, #15
 8000356:	3b04      	subs	r3, #4
 8000358:	0112      	lsls	r2, r2, #4
 800035a:	b2d2      	uxtb	r2, r2
 800035c:	440b      	add	r3, r1
 800035e:	761a      	strb	r2, [r3, #24]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	e000e100 	.word	0xe000e100
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <led_init>:
#include "gpio.h"

void led_init(){
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
	GPIOB->MODER &= ~(3 << (LED1_PIN * 2));
 8000378:	4b1a      	ldr	r3, [pc, #104]	@ (80003e4 <led_init+0x70>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a19      	ldr	r2, [pc, #100]	@ (80003e4 <led_init+0x70>)
 800037e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000382:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (LED1_PIN * 2));
 8000384:	4b17      	ldr	r3, [pc, #92]	@ (80003e4 <led_init+0x70>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a16      	ldr	r2, [pc, #88]	@ (80003e4 <led_init+0x70>)
 800038a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800038e:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(3 << (LED2_PIN * 2));
 8000390:	4b14      	ldr	r3, [pc, #80]	@ (80003e4 <led_init+0x70>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	@ (80003e4 <led_init+0x70>)
 8000396:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800039a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (LED2_PIN * 2));
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <led_init+0x70>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a10      	ldr	r2, [pc, #64]	@ (80003e4 <led_init+0x70>)
 80003a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003a6:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(3 << (LED3_PIN * 2));
 80003a8:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <led_init+0x70>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0d      	ldr	r2, [pc, #52]	@ (80003e4 <led_init+0x70>)
 80003ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80003b2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (LED3_PIN * 2));
 80003b4:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <led_init+0x70>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a0a      	ldr	r2, [pc, #40]	@ (80003e4 <led_init+0x70>)
 80003ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003be:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(3 << (5 * 2));
 80003c0:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <led_init+0x74>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a08      	ldr	r2, [pc, #32]	@ (80003e8 <led_init+0x74>)
 80003c6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80003ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << (5 * 2));
 80003cc:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <led_init+0x74>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a05      	ldr	r2, [pc, #20]	@ (80003e8 <led_init+0x74>)
 80003d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003d6:	6013      	str	r3, [r2, #0]
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40020400 	.word	0x40020400
 80003e8:	40020000 	.word	0x40020000

080003ec <button_init>:

void button_init(){
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(3 << (BTN1_PIN * 2));
 80003f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000468 <button_init+0x7c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000468 <button_init+0x7c>)
 80003f6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3 << (BTN1_PIN * 2));
 80003fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000468 <button_init+0x7c>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	4a19      	ldr	r2, [pc, #100]	@ (8000468 <button_init+0x7c>)
 8000402:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000406:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 1 << (BTN1_PIN * 2);
 8000408:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <button_init+0x7c>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	4a16      	ldr	r2, [pc, #88]	@ (8000468 <button_init+0x7c>)
 800040e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000412:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(3 << (BTN2_PIN * 2));
 8000414:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <button_init+0x7c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <button_init+0x7c>)
 800041a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800041e:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3 << (BTN2_PIN * 2));
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <button_init+0x7c>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	4a10      	ldr	r2, [pc, #64]	@ (8000468 <button_init+0x7c>)
 8000426:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800042a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 1 << (BTN2_PIN * 2);
 800042c:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <button_init+0x7c>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <button_init+0x7c>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(3 << (BTN3_PIN * 2));
 8000438:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <button_init+0x7c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a0a      	ldr	r2, [pc, #40]	@ (8000468 <button_init+0x7c>)
 800043e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000442:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3 << (BTN3_PIN * 2));
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <button_init+0x7c>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <button_init+0x7c>)
 800044a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800044e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= 1 << (BTN3_PIN * 2);
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <button_init+0x7c>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	4a04      	ldr	r2, [pc, #16]	@ (8000468 <button_init+0x7c>)
 8000456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800045a:	60d3      	str	r3, [r2, #12]
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40020000 	.word	0x40020000

0800046c <button_interrupt_init>:
	BUZZER_PORT->MODER &= ~(3UL << (BUZZER_PIN * 2));
	BUZZER_PORT->MODER |=  (1UL << (BUZZER_PIN * 2));
	BUZZER_PORT->ODR &= ~(1UL << BUZZER_PIN);
}

void button_interrupt_init(void){
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	SYSCFG->EXTICR[0] &= ~(0xFUL << (BTN2_PIN * 4)); // Xóa cấu hình cũ cho EXTI2 (PA2)
 8000470:	4b2f      	ldr	r3, [pc, #188]	@ (8000530 <button_interrupt_init+0xc4>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	4a2e      	ldr	r2, [pc, #184]	@ (8000530 <button_interrupt_init+0xc4>)
 8000476:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800047a:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] &= ~(0xFUL << (BTN1_PIN * 4)); // Xóa cấu hình cũ cho EXTI3 (PA3)
 800047c:	4b2c      	ldr	r3, [pc, #176]	@ (8000530 <button_interrupt_init+0xc4>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	4a2b      	ldr	r2, [pc, #172]	@ (8000530 <button_interrupt_init+0xc4>)
 8000482:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000486:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[2] &= ~(0xFUL << ((BTN3_PIN % 4) * 4)); // Xóa cấu hình cũ cho EXTI10 (PA10)
 8000488:	4b29      	ldr	r3, [pc, #164]	@ (8000530 <button_interrupt_init+0xc4>)
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	4a28      	ldr	r2, [pc, #160]	@ (8000530 <button_interrupt_init+0xc4>)
 800048e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000492:	6113      	str	r3, [r2, #16]

	EXTI->RTSR &= ~(1UL << BTN1_PIN); // Không dùng Rising Trigger cho BTN1 (PA3)
 8000494:	4b27      	ldr	r3, [pc, #156]	@ (8000534 <button_interrupt_init+0xc8>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	4a26      	ldr	r2, [pc, #152]	@ (8000534 <button_interrupt_init+0xc8>)
 800049a:	f023 0308 	bic.w	r3, r3, #8
 800049e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |=  (1UL << BTN1_PIN); // Kích hoạt Falling Trigger cho BTN1 (PA3)
 80004a0:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <button_interrupt_init+0xc8>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	4a23      	ldr	r2, [pc, #140]	@ (8000534 <button_interrupt_init+0xc8>)
 80004a6:	f043 0308 	orr.w	r3, r3, #8
 80004aa:	60d3      	str	r3, [r2, #12]

	EXTI->RTSR &= ~(1UL << BTN2_PIN); // Không dùng Rising Trigger cho BTN2 (PA2)
 80004ac:	4b21      	ldr	r3, [pc, #132]	@ (8000534 <button_interrupt_init+0xc8>)
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	4a20      	ldr	r2, [pc, #128]	@ (8000534 <button_interrupt_init+0xc8>)
 80004b2:	f023 0304 	bic.w	r3, r3, #4
 80004b6:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |=  (1UL << BTN2_PIN); // Kích hoạt Falling Trigger cho BTN2 (PA2)
 80004b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <button_interrupt_init+0xc8>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000534 <button_interrupt_init+0xc8>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	60d3      	str	r3, [r2, #12]

	EXTI->RTSR &= ~(1UL << BTN3_PIN); // Không dùng Rising Trigger cho BTN3 (PA10)
 80004c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <button_interrupt_init+0xc8>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000534 <button_interrupt_init+0xc8>)
 80004ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80004ce:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |=  (1UL << BTN3_PIN);
 80004d0:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <button_interrupt_init+0xc8>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a17      	ldr	r2, [pc, #92]	@ (8000534 <button_interrupt_init+0xc8>)
 80004d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004da:	60d3      	str	r3, [r2, #12]

    EXTI->IMR |= (1UL << BTN1_PIN);  // Unmask EXTI3
 80004dc:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <button_interrupt_init+0xc8>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a14      	ldr	r2, [pc, #80]	@ (8000534 <button_interrupt_init+0xc8>)
 80004e2:	f043 0308 	orr.w	r3, r3, #8
 80004e6:	6013      	str	r3, [r2, #0]
    EXTI->IMR |= (1UL << BTN2_PIN);  // Unmask EXTI2
 80004e8:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <button_interrupt_init+0xc8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a11      	ldr	r2, [pc, #68]	@ (8000534 <button_interrupt_init+0xc8>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6013      	str	r3, [r2, #0]
    EXTI->IMR |= (1UL << BTN3_PIN);  // Unmask EXTI10
 80004f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <button_interrupt_init+0xc8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000534 <button_interrupt_init+0xc8>)
 80004fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004fe:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(EXTI2_IRQn, 0); // Ưu tiên cao nhất (hoặc giá trị phù hợp)
 8000500:	2100      	movs	r1, #0
 8000502:	2008      	movs	r0, #8
 8000504:	f7ff ff0c 	bl	8000320 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI3_IRQn, 0);
 8000508:	2100      	movs	r1, #0
 800050a:	2009      	movs	r0, #9
 800050c:	f7ff ff08 	bl	8000320 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI15_10_IRQn, 0); // EXTI10 thuộc group này
 8000510:	2100      	movs	r1, #0
 8000512:	2028      	movs	r0, #40	@ 0x28
 8000514:	f7ff ff04 	bl	8000320 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI2_IRQn);
 8000518:	2008      	movs	r0, #8
 800051a:	f7ff fee3 	bl	80002e4 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3_IRQn);
 800051e:	2009      	movs	r0, #9
 8000520:	f7ff fee0 	bl	80002e4 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000524:	2028      	movs	r0, #40	@ 0x28
 8000526:	f7ff fedd 	bl	80002e4 <__NVIC_EnableIRQ>
};
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40013800 	.word	0x40013800
 8000534:	40013c00 	.word	0x40013c00

08000538 <led_on>:

void led_on(GPIO_TypeDef* GPIOx, uint16_t pin){
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR = (1UL << pin); // Set pin
 8000544:	887b      	ldrh	r3, [r7, #2]
 8000546:	2201      	movs	r2, #1
 8000548:	409a      	lsls	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	619a      	str	r2, [r3, #24]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <led_off>:

void led_off(GPIO_TypeDef* GPIOx, uint16_t pin){
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
	GPIOx->BSRR = (1UL << (pin + 16)); // Reset pin
 8000566:	887b      	ldrh	r3, [r7, #2]
 8000568:	3310      	adds	r3, #16
 800056a:	2201      	movs	r2, #1
 800056c:	409a      	lsls	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	619a      	str	r2, [r3, #24]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1UL << BTN1_PIN)){
 8000586:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <EXTI3_IRQHandler+0x44>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	2b00      	cmp	r3, #0
 8000590:	d014      	beq.n	80005bc <EXTI3_IRQHandler+0x3c>
		EXTI->PR = (1UL << BTN1_PIN);
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <EXTI3_IRQHandler+0x44>)
 8000594:	2208      	movs	r2, #8
 8000596:	615a      	str	r2, [r3, #20]
		led_on(BTN_PORT, 5);
 8000598:	2105      	movs	r1, #5
 800059a:	480b      	ldr	r0, [pc, #44]	@ (80005c8 <EXTI3_IRQHandler+0x48>)
 800059c:	f7ff ffcc 	bl	8000538 <led_on>
		for (int i = 1; i< 10000000; i++);
 80005a0:	2301      	movs	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	e002      	b.n	80005ac <EXTI3_IRQHandler+0x2c>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <EXTI3_IRQHandler+0x4c>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	dbf8      	blt.n	80005a6 <EXTI3_IRQHandler+0x26>
		led_off(BTN_PORT, 5);
 80005b4:	2105      	movs	r1, #5
 80005b6:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <EXTI3_IRQHandler+0x48>)
 80005b8:	f7ff ffcf 	bl	800055a <led_off>
	}
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40013c00 	.word	0x40013c00
 80005c8:	40020000 	.word	0x40020000
 80005cc:	00989680 	.word	0x00989680

080005d0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1UL << BTN2_PIN)){
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <EXTI2_IRQHandler+0x44>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d014      	beq.n	800060c <EXTI2_IRQHandler+0x3c>
		EXTI->PR = (1UL << BTN2_PIN);
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <EXTI2_IRQHandler+0x44>)
 80005e4:	2204      	movs	r2, #4
 80005e6:	615a      	str	r2, [r3, #20]
		led_on(BTN_PORT, 5);
 80005e8:	2105      	movs	r1, #5
 80005ea:	480b      	ldr	r0, [pc, #44]	@ (8000618 <EXTI2_IRQHandler+0x48>)
 80005ec:	f7ff ffa4 	bl	8000538 <led_on>
		for (int i = 1; i< 10000000; i++);
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	e002      	b.n	80005fc <EXTI2_IRQHandler+0x2c>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3301      	adds	r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a07      	ldr	r2, [pc, #28]	@ (800061c <EXTI2_IRQHandler+0x4c>)
 8000600:	4293      	cmp	r3, r2
 8000602:	dbf8      	blt.n	80005f6 <EXTI2_IRQHandler+0x26>
		led_off(BTN_PORT, 5);
 8000604:	2105      	movs	r1, #5
 8000606:	4804      	ldr	r0, [pc, #16]	@ (8000618 <EXTI2_IRQHandler+0x48>)
 8000608:	f7ff ffa7 	bl	800055a <led_off>
	}
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40013c00 	.word	0x40013c00
 8000618:	40020000 	.word	0x40020000
 800061c:	00989680 	.word	0x00989680

08000620 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1UL << BTN3_PIN)){
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <EXTI15_10_IRQHandler+0x48>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800062e:	2b00      	cmp	r3, #0
 8000630:	d015      	beq.n	800065e <EXTI15_10_IRQHandler+0x3e>
		EXTI->PR = (1UL << BTN3_PIN);
 8000632:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <EXTI15_10_IRQHandler+0x48>)
 8000634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000638:	615a      	str	r2, [r3, #20]
		led_on(BTN_PORT, 5);
 800063a:	2105      	movs	r1, #5
 800063c:	480b      	ldr	r0, [pc, #44]	@ (800066c <EXTI15_10_IRQHandler+0x4c>)
 800063e:	f7ff ff7b 	bl	8000538 <led_on>
		for (int i = 1; i< 10000000; i++);
 8000642:	2301      	movs	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	e002      	b.n	800064e <EXTI15_10_IRQHandler+0x2e>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3301      	adds	r3, #1
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a07      	ldr	r2, [pc, #28]	@ (8000670 <EXTI15_10_IRQHandler+0x50>)
 8000652:	4293      	cmp	r3, r2
 8000654:	dbf8      	blt.n	8000648 <EXTI15_10_IRQHandler+0x28>
		led_off(BTN_PORT, 5);
 8000656:	2105      	movs	r1, #5
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <EXTI15_10_IRQHandler+0x4c>)
 800065a:	f7ff ff7e 	bl	800055a <led_off>
	}
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40013c00 	.word	0x40013c00
 800066c:	40020000 	.word	0x40020000
 8000670:	00989680 	.word	0x00989680

08000674 <clock_init>:
#include "stm32f4xx.h"
#include "gpio.h"
#include "adc.h"

void clock_init(){
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <clock_init+0x4c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a10      	ldr	r2, [pc, #64]	@ (80006c0 <clock_init+0x4c>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <clock_init+0x4c>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000688:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <clock_init+0x4c>)
 800068a:	f043 0302 	orr.w	r3, r3, #2
 800068e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <clock_init+0x4c>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000694:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <clock_init+0x4c>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <clock_init+0x4c>)
 800069e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a0:	4a07      	ldr	r2, [pc, #28]	@ (80006c0 <clock_init+0x4c>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <clock_init+0x4c>)
 80006aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ac:	4a04      	ldr	r2, [pc, #16]	@ (80006c0 <clock_init+0x4c>)
 80006ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800

080006c4 <main>:

int main(void){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
	clock_init();
 80006ca:	f7ff ffd3 	bl	8000674 <clock_init>
	led_init();
 80006ce:	f7ff fe51 	bl	8000374 <led_init>
	button_init();
 80006d2:	f7ff fe8b 	bl	80003ec <button_init>
	button_interrupt_init();
 80006d6:	f7ff fec9 	bl	800046c <button_interrupt_init>
	adc1_init();
 80006da:	f7ff fd7d 	bl	80001d8 <adc1_init>
	while(1){
		uint16_t mq6_adc_value = adc1_read_channel(10);
 80006de:	200a      	movs	r0, #10
 80006e0:	f7ff fde0 	bl	80002a4 <adc1_read_channel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	807b      	strh	r3, [r7, #2]
		if (mq6_adc_value > 200){
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80006ec:	d9f7      	bls.n	80006de <main+0x1a>
			led_on(BTN_PORT, 5);
 80006ee:	2105      	movs	r1, #5
 80006f0:	4808      	ldr	r0, [pc, #32]	@ (8000714 <main+0x50>)
 80006f2:	f7ff ff21 	bl	8000538 <led_on>
			for (int i = 1; i< 1000000; i++);
 80006f6:	2301      	movs	r3, #1
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	e002      	b.n	8000702 <main+0x3e>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3301      	adds	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a04      	ldr	r2, [pc, #16]	@ (8000718 <main+0x54>)
 8000706:	4293      	cmp	r3, r2
 8000708:	ddf8      	ble.n	80006fc <main+0x38>
			led_off(BTN_PORT, 5);
 800070a:	2105      	movs	r1, #5
 800070c:	4801      	ldr	r0, [pc, #4]	@ (8000714 <main+0x50>)
 800070e:	f7ff ff24 	bl	800055a <led_off>
	while(1){
 8000712:	e7e4      	b.n	80006de <main+0x1a>
 8000714:	40020000 	.word	0x40020000
 8000718:	000f423f 	.word	0x000f423f

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <NMI_Handler+0x4>

08000724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <MemManage_Handler+0x4>

08000734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <UsageFault_Handler+0x4>

08000744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000772:	f000 f83f 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <SystemInit+0x20>)
 8000782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000786:	4a05      	ldr	r2, [pc, #20]	@ (800079c <SystemInit+0x20>)
 8000788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800078c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007a4:	f7ff ffea 	bl	800077c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	@ (80007ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ce:	f000 f825 	bl	800081c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007d2:	f7ff ff77 	bl	80006c4 <main>
  bx  lr    
 80007d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80007e4:	08000884 	.word	0x08000884
  ldr r2, =_sbss
 80007e8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80007ec:	20000024 	.word	0x20000024

080007f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC_IRQHandler>
	...

080007f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000000 	.word	0x20000000
 8000818:	20000020 	.word	0x20000020

0800081c <__libc_init_array>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	4d0d      	ldr	r5, [pc, #52]	@ (8000854 <__libc_init_array+0x38>)
 8000820:	4c0d      	ldr	r4, [pc, #52]	@ (8000858 <__libc_init_array+0x3c>)
 8000822:	1b64      	subs	r4, r4, r5
 8000824:	10a4      	asrs	r4, r4, #2
 8000826:	2600      	movs	r6, #0
 8000828:	42a6      	cmp	r6, r4
 800082a:	d109      	bne.n	8000840 <__libc_init_array+0x24>
 800082c:	4d0b      	ldr	r5, [pc, #44]	@ (800085c <__libc_init_array+0x40>)
 800082e:	4c0c      	ldr	r4, [pc, #48]	@ (8000860 <__libc_init_array+0x44>)
 8000830:	f000 f818 	bl	8000864 <_init>
 8000834:	1b64      	subs	r4, r4, r5
 8000836:	10a4      	asrs	r4, r4, #2
 8000838:	2600      	movs	r6, #0
 800083a:	42a6      	cmp	r6, r4
 800083c:	d105      	bne.n	800084a <__libc_init_array+0x2e>
 800083e:	bd70      	pop	{r4, r5, r6, pc}
 8000840:	f855 3b04 	ldr.w	r3, [r5], #4
 8000844:	4798      	blx	r3
 8000846:	3601      	adds	r6, #1
 8000848:	e7ee      	b.n	8000828 <__libc_init_array+0xc>
 800084a:	f855 3b04 	ldr.w	r3, [r5], #4
 800084e:	4798      	blx	r3
 8000850:	3601      	adds	r6, #1
 8000852:	e7f2      	b.n	800083a <__libc_init_array+0x1e>
 8000854:	0800087c 	.word	0x0800087c
 8000858:	0800087c 	.word	0x0800087c
 800085c:	0800087c 	.word	0x0800087c
 8000860:	08000880 	.word	0x08000880

08000864 <_init>:
 8000864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000866:	bf00      	nop
 8000868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800086a:	bc08      	pop	{r3}
 800086c:	469e      	mov	lr, r3
 800086e:	4770      	bx	lr

08000870 <_fini>:
 8000870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000872:	bf00      	nop
 8000874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000876:	bc08      	pop	{r3}
 8000878:	469e      	mov	lr, r3
 800087a:	4770      	bx	lr
